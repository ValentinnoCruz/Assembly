;Valeninno Cruz
; CIS - 11
; 4-30-20


	.ORIG x3000
	JSR MULT1		; THIS IS THE CALL FOR THE SUBROUTINE, JSR ALLOWS US TO DO CALL	
	HALT

;SAVE REGISTERS TO REPRESENT BINARY

MULT1	ST R0, SAVEREG0	; R0=X	STORE VALUE TO SAVEREGISTER LOCATIONS
	ST R1, SAVEREG1	; R1=Y
	ST R2, SAVEREG2
	ST R3, SAVEREG3
	ST R4, SAVEREG4
	ST R5, SAVEREG5
	ST R6, SAVEREG6
	ST R7, SAVEREG7

	AND R7, R7, #0		; CLEAR R7
	ADD R7, R7, #1		; ADD 1 TO SHIFT (R7 REPRESENTS ARE LEAST SIG FIG)
	LDI R0, X		; LOAD X TO R0

	ADD R0, R0, #0		; R0=0
	BRzp POS		; BRANCH TO POS IF POSITIVE NUMBER
	ADD R7, R7, #-1		; SUBTRACT 1 TO TEST FOR SIGN (+)(-)
	NOT R0, R0		; 1'S COMPLIMENT R0 	-----
	ADD R0, R0, #1		; 2'S COMPLIMENT R0, R0 = -X ------(MAKE SURE X IS NEG)

POS	LDI R1, Y		; LOAD Y TO R1
	ADD R1, R1, #0		; R1=0 OR Y=0
	BRzp POS2		; BRANCH TO POS2 IF POSITIVE NESTED CONDITION.
	ADD R7, R7, #-1		; SUBTRACT 1
	NOT R1, R1		; 1'S COMPLIMENT OF R1
	ADD R1, R1, #1		; 2'S COMPLIMENT OF Y, -Y = R1
	

POS2	AND R2, R2, #0		; CLEAR R2
	AND R4, R4, #0		; CLEAR R4
	AND R5, R5, #0		; CLEAR R5
	ADD R4, R4, #15		; R4 = #15, MSB    ---- (COUNT IN FOR LOOP)L SIGBIT 
	ADD R2, R2, x1		; R2 = x1, ADD 1 FOR SHIFT
	ADD R6, R1, #0		; COPY R1 TO R6 = Y


LOOP	AND R3, R6, R2		; LEAST SIG BIT = R3
	BRz ISZERO		; BRANCH TO ISZERO IT IS 0
	ADD R5, R5, R0		; R5 = X
	

ISZERO	ADD R2, R2, R2		; SHIFT 1 TO LEFT BIT
	ADD R0, R0, R0		; SHIFT VALE IS X
	ADD R4, R4, #-1		; SUBTRACT 1 FROM R5, CONDITION FOR BRANCH
	BRp LOOP		; IF POSITIVE GO TO LOOP
	ADD R7, R7, #0		; CONDITION FOR BRANCH
	BRnp NOTZERO		; GO TO NOTZERO IF POSITIVE OR NEGATIVE
	NOT R5, R5		; 1'S COMPLIMENT R5
	ADD R5, R5, #1		; 2'S COMPLIMENT OF R5 (-R5), REPRESENTS THE NEGATIVE PRODUCT IN OUTPUT
	

NOTZERO	STI R5, P		; STORES R5 TO P
	LD R0, SAVEREG0		; LOAD SAVED VALE TO REGISTER
	LD R1, SAVEREG1		
	LD R2, SAVEREG2 
	LD R3, SAVEREG3 
	LD R4, SAVEREG4 
	LD R5, SAVEREG5 
	LD R6, SAVEREG6 
	LD R7, SAVEREG7 
	RET			; RETURN FROM SUBROUTINE


SAVEREG0	.FILL x0
SAVEREG1	.FILL x1
SAVEREG2	.FILL x2
SAVEREG3	.FILL x3
SAVEREG4	.FILL x4
SAVEREG5	.FILL x5
SAVEREG6	.FILL x6
SAVEREG7	.FILL x7


X .FILL x3100	; x
Y .FILL x3101	; y
P .FILL x3102	; prod result

.END